*************************************
*** code for typeahead local data ***
	/*
		            			<option>Cookbook</option>
		            			<option>Person</option>
		            			<option>Newspaper</option>
		            			<option>Website</option>
		            			<option>Other</option>

	
	var substringMatcher = function(strs) 
	{
		return function findMatches(q, cb) 
		{
			var matches, substrRegex;
			 
			// an array that will be populated with substring matches
			matches = [];
			 
			// regex used to determine if a string contains the substring `q`
			substrRegex = new RegExp(q, 'i');
			 
			// iterate through the pool of strings and for any string that
			// contains the substring `q`, add it to the `matches` array
			$.each(strs, function(i, str) {
				if (substrRegex.test(str)) {
			    	matches.push(str);
			    }
			});
		 
			cb(matches);
		};
	};
		 
	var states = ['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California',
	  'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii',
	  'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana',
	  'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota',
	  'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire',
	  'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota',
	  'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island',
	  'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont',
	  'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'
	];
		 
	$('#inputCategory').typeahead({
	  hint: true,
	  highlight: true,
	  minLength: 1
	},
	{
	  name: 'states',
	  source: substringMatcher(states)
	});
	*/
	//<<< end of code

	
	/* 
	//this version works for setting a <select> with categories - DO NOT DELETE!!!
	//it does NOT set the data-id - need to add that code
	//it has no error handling
	
	$.getJSON("/recipeorganizer/recipe/addRecipe/getCategories", function (data) {
		$.each(data, function (index, item) {
	    	$('#inputSourceList').append(
	        	$('<option></option>').val(item.description).html(item.description)
			);
		});
	 }); */

	/* 
	$("#inputCategory").blur(function () {
		$.post('/recipeorganizer/recipe/addRecipe/addCategory', { id: 0, name: this.value });
	}); 
	*/
	
	/* $("#inputCategory").blur(function () {
		var data = {"id":"0","description":$(this).val()} 
		$.ajax({
			headers: { 
		        'Accept': 'application/json',
		        'Content-Type': 'application/json' 
		    },
			type: 'POST',
			url: '/recipeorganizer/recipe/addRecipe/addCategory',
			dataType: 'json',
			data: JSON.stringify(data),
			success: function(){alert("Category added!");},
			failure: function(){alert("JSON post failed");}
		});
	}); */
	
      	/* console.log("Curr: " + currentEntry.html());
		console.log("New: " + newEntry.html()); */		
      	

    /*sorter: function(a,b) {
    	var InputString = $('#ingredientName').val();

        //move exact matches to top
    	if(InputString==a.value){ return -1;}
    	if(InputString==b.value){return 1;}

         //close match without case matching
    	if(InputString.toLowerCase() ==a.value.toLowerCase()){ return -1;}
    	if(InputString.toLowerCase()==b.value.toLowerCase()){return 1;} 

	    if( (InputString!=a.value) && (InputString!=b.value)) {
	    	if (a.value < b.value) {
	            return -1;
	         }
	         else if (a.value > b.value) {
	            return 1;
	         }
	         else return 0;
	    }
    },*/

/*var ingredBH = new Bloodhound( {
	limit: 20,
    datumTokenizer: function(datum) {
        return Bloodhound.tokenizers.whitespace(datum.name);
    },
    queryTokenizer: Bloodhound.tokenizers.whitespace,    	
    queryTokenizer: Bloodhound.tokenizers.whitespace,
    remote: {
		url: '/recipeorganizer/recipe/getIngredients?searchStr=%QUERY',
		wildcard: '%QUERY',
		filter: function(data) {
			return $.map(data, function (data) {
				console.log("data: " + data.name);
				return {
					id : data.id,
                    name : data.name
                };
            });
	    } 
    }
});*/

/*function initIngredientsTA() {
	$('.ingredDesc').typeahead({
		hint: true,
		highlight: true,
		minLength: 2
	},
	{
        name: 'ingredients',
        displayKey: 'name',
        limit: 20,
        source: ingredBH
	})	
};*/

******************************************************************
*** Error after submitting the form with errors several times: ***
SEVERE: Servlet.service() for servlet [appServlet] in context with path [/recipeorganizer] threw exception [Request processing failed; nested exception is org.springframework.web.multipart.MaxUploadSizeExceededException: Maximum upload size of 20971520 bytes exceeded; nested exception is org.apache.commons.fileupload.FileUploadBase$SizeLimitExceededException: the request was rejected because its size (60469355) exceeds the configured maximum (20971520)] with root cause
org.apache.commons.fileupload.FileUploadBase$SizeLimitExceededException: the request was rejected because its size (60469355) exceeds the configured maximum (20971520)

**************************
*** JSP error handling ***

		<%-- <spring:hasBindErrors name="recipe">  
	       <!-- all your global errors here -->  
	       <c:forEach items="${errors.globalErrors}" var="error">  
	         GlobalErrors Field:${error.code} <br />  
	         <br />  
	       </c:forEach>  
	       <!-- all your field errors here -->  
	       <c:forEach items="${errors.fieldErrors}" var="error">  
	         <!-- you can also use error.code instead of error (which calls just FieldError#toString() -->  
	         <div class="error">  
	           Field Error: ${error.field}. ErrorCode: ${error} <br />  
	         </div>  
	         <br />  
	       </c:forEach>
	      </spring:hasBindErrors> --%>

        <div class="control-label has-error">  
          Name: ${nameError} <br />
          Ingredient: ${ingredError} <br />
          Instruction: ${instructError} <br />
          Category: ${catError} <br />
        </div>  
		
	    <spring:hasBindErrors name="recipe">
	    <%-- <p><b># of Errors:<c:out value="${errors.errorCount}"/></b></p> --%>
	    <c:set var="errorCnt">${errors.errorCount}</c:set>
	    <p><b># of Errors:${errorCnt}</b></p>
	    <p></p>
		<c:forEach var="error" items="${errors.allErrors}">
			<b><c:out value="${error}" /></b>
			<p></p>
		</c:forEach>
		</spring:hasBindErrors>
		<p></p>
		<p></p>

		<spring:hasBindErrors name="recipe">
		<c:forEach var="error" items="${errors.allErrors}">
			<b><c:out value="${error.field}" /></b>
			<c:forEach items="${error.codes}" var="code">
            	<b><c:out value="${code}"/></b>
            </c:forEach>
			<b><c:out value="${error.defaultMessage}" /></b>
			<p></p>			
		</c:forEach>
	    </spring:hasBindErrors>
		<p></p>
		<spring:bind path="recipe.name">
			<p>NAME</p>
			<p>Value="<c:out value="${status.value}"/>"</p>
			<p>Expression="<c:out value="${status.expression}"/>"</p>
			<c:if test="${status.error}">
                <p>Error codes:</p>
                <c:forEach items="${status.errorCodes}" var="code">
                    <p><c:out value="${code}"/></p>
                </c:forEach>
                <p>Error messages:</p>
                <c:forEach items="${status.errorMessages}" var="error">
                    <p><c:out value="${error}"/></p>
                </c:forEach>
            </c:if>
		</spring:bind>

 **********************
 *** more typeahead ***
 	$('.ingredQtyType').typeahead(
	 	{
	    	hint: true,
	        highlight: true,
	        minLength: 1
	    },
		{
	        name: 'measures',
	        source: measureBH
	    }) */
	    
		/* $('.ingredDesc').typeahead(
	 	{
	    	hint: true,
	        highlight: true,
	        minLength: 1
	    },
		{
	        name: 'ingredients',
	        displayKey: 'name',
	        limit: 20,
	        //source: ingredBH.ttAdapter()
	        source: ingredBH
	    }) */
	    
	    
	/* 	    var ingredBH = new Bloodhound({
		    	limit: limit,
		        datumTokenizer: function(datum) {
			        return Bloodhound.tokenizers.whitespace(datum.name);
		        },
		        queryTokenizer: Bloodhound.tokenizers.whitespace,    	
				prefetch: {
					url: prefetchUrl,
					cache: cache,
					filter: function(data) {
						return $.map(data.ingredients, function (ingredient) {
		                    return {
								id : ingredient.id,
		                        name : ingredient.name
		                    };
		                });
					} 
				},
		        remote: {
					url: remoteUrl,
					cache: cache,
					wildcard: '%QUERY',
					filter: function(data) {
						console.log("data: " + data);
						return $.map(data, function (data) {
		                    return {
								id : data.id,
		                        name : data.name
		                    };
		                });
				    } 
		        }
			});
	 */	
	    
function initIngredientsTA() {
		//set the options
	    var ingredBH = new Bloodhound({
	    	limit: 20,
	        datumTokenizer: function(datum) {
		        return Bloodhound.tokenizers.whitespace(datum.name);
	        },
	        queryTokenizer: Bloodhound.tokenizers.whitespace,    	
			prefetch: {
				url: '/recipeorganizer/resources/ingredients.json',
				cache: false,
				filter: function(data) {
					console.log("data: " + data.ingredients);
					return $.map(data.ingredients, function (ingredient) {
	                    return {
							id : ingredient.id,
	                        name : ingredient.name
	                    };
	                });
				} 
			},
	        remote: {
				url: '/recipeorganizer/recipe/addRecipe/getIngredients?searchStr=%QUERY',
				cache: false,
				wildcard: '%QUERY',
				filter: function(data) {
					console.log("data: " + data);
					return $.map(data, function (data) {
	                    return {
							id : data.id,
	                        name : data.name
	                    };
	                });
			    } 
	        }
		});

	    
*************************************************************************************
*** exception handling for AJAX/JSON that iterates through all the error messages ***

	@ExceptionHandler(MethodArgumentNotValidException.class)
	@ResponseStatus(value=HttpStatus.BAD_REQUEST)
	@ResponseBody
	public String handleMethodArgumentNotValid(HttpServletRequest req, MethodArgumentNotValidException ex) {
	    
		logger.info("Caught exception");

		BindingResult result = ex.getBindingResult();
		List<FieldError> fieldErrors = result.getFieldErrors();
		
		Locale locale = LocaleContextHolder.getLocale();
		String errorCode = "";
		String defaultMsg = "";
		String errorMsg = "";


		String msg = "";
		StringBuilder errorCode = new StringBuilder("");
		
		for (FieldError fieldError : fieldErrors) {
			defaultMsg += fieldError.getDefaultMessage();
			
			errorCode.append(fieldError.getCode()).append(".");
			errorCode.append(fieldError.getObjectName()).append(".");
			errorCode.append(fieldError.getField());
			
			logger.info("errorCode:" + errorCode.toString());

			try {
				msg = messageSource.getMessage(errorCode.toString(), null, locale);
			}
			catch (NoSuchMessageException e) {
				msg = "";
			};
			
			errorMsg += msg;
		}
	    

*********************************
*** loop through an exception ***
	    
			logger.info("LOOP THROUGH NESTED CAUSES");
			Throwable cause = e.getCause();
			while (cause != null) {
				
				Throwable se = cause;

				logger.info("cause: " + se.toString());
				logger.info("getMessage: " + se.getMessage());
				logger.info("getLocalizedMessage: " + se.getLocalizedMessage());
				logger.info("getClass: " + se.getClass().toString());
				
				cause = cause.getCause();
		    }
			
			logger.info("SEARCH FOR ConstraintViolationException");
			cause = e.getCause();
			while (cause != null) {
				if (cause instanceof ConstraintViolationException) {
					break;
				}
				cause = cause.getCause();
		    }
			
			if (cause != null)
			{
				ConstraintViolationException cve = (ConstraintViolationException) cause;
				
				logger.info("cve: " + cve.toString());
				logger.info("getConstraintName: " + cve.getConstraintName());
				logger.info("getErrorCode: " + cve.getErrorCode());
				logger.info("getMessage: " + cve.getMessage());
				logger.info("getLocalizedMessage: " + cve.getLocalizedMessage());
				logger.info("getSQL: " + cve.getSQL());
				logger.info("getSQLState: " + cve.getSQLState());
			}

			logger.info("SEARCH FOR SQLIntegrityConstraintViolationException");
			cause = e.getCause();
			while (cause != null) {
				if (cause instanceof SQLIntegrityConstraintViolationException) {
					break;
				}
				cause = cause.getCause();
		    }
			
			if (cause != null)
			{
				SQLIntegrityConstraintViolationException cve = (SQLIntegrityConstraintViolationException) cause;
				
				logger.info("cve: " + cve.toString());
				logger.info("getErrorCode: " + cve.getErrorCode());
				logger.info("getMessage: " + cve.getMessage());
				logger.info("getLocalizedMessage: " + cve.getLocalizedMessage());
				logger.info("getSQLState: " + cve.getSQLState());
			}
			
			logger.info("EXCEPTION UTILS");
			logger.info("getThrowableCount: " + ExceptionUtils.getThrowableCount(e));
			logger.info("getMessage: " + ExceptionUtils.getMessage(e));
			logger.info("getRootCause: " + ExceptionUtils.getRootCause(e).toString());
			logger.info("getRootCauseMessage: " + ExceptionUtils.getRootCauseMessage(e));


***********************************
*** display page by ID as param ***
	/* same as above method, but is mapped to
	 * /api/person?id= rather than /api/person/{id}
	 */
	/*@RequestMapping(value="person", params="id")
	@ResponseBody
	public Person getByIdFromParam(@RequestParam Long id) {
		return personService.getById(id);
	}*/

*****************************************
*** original try/catch in POST method ***

		//save a recipe to the DB
		try {
			recipeService.addRecipe(recipe);
		} catch (DataAccessException e) {

			logger.info("Recipe: DataAccessException exception!");
			
			Throwable cause = e.getCause();
			while (cause != null) {
				if (cause instanceof ConstraintViolationException) {
					break;
				}
				cause = cause.getCause();
		    }
			
			if (cause != null)
			{
				ConstraintViolationException cve = (ConstraintViolationException) cause;
				
				String constraintName = cve.getConstraintName();
				int errorCode = cve.getErrorCode();
				
				if (constraintName.equalsIgnoreCase("RECIPE.RECIPE_IDX1") && errorCode == 1) {

					String msg = ExceptionUtils.getRootCauseMessage(e);
					
					result.rejectValue("name", "Duplicate", msg);
					
					//get the ingredients (lazy loaded) and return the completed form
					model.addAttribute("ingredientList", recipeService.getIngredients(recipe));			
					return "recipe/addRecipe";
				}
			}
			
			//TODO: need generic error page!!!
		}


*****************************
*** some validation stuff ***
		
/*
***validation fieldError
field: name
code: NotEmpty
string: Field error in object 'recipe' on field 'name': rejected value []; codes [NotEmpty.recipe.name,NotEmpty.name,NotEmpty.java.lang.String,NotEmpty]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [recipe.name,name]; arguments []; default message [name]]; default message [may not be empty]

***ConstraintViolationException
getConstraintName: RECIPE.RECIPE_IDX1
getErrorCode: 1
getSQLState: 23000

***EXCEPTION UTILS
getRootCause: java.sql.SQLIntegrityConstraintViolationException: ORA-00001: unique constraint (RECIPE.RECIPE_IDX1) violated
getRootCauseMessage: SQLIntegrityConstraintViolationException: ORA-00001: unique constraint (RECIPE.RECIPE_IDX1) violated
*/
		
		
CREATE TABLE  "PERSISTENT_LOGINS" 
   (	"USERNAME" VARCHAR2(100) NOT NULL ENABLE, 
	"SERIES" VARCHAR2(64) NOT NULL ENABLE, 
	"TOKEN" VARCHAR2(64) NOT NULL ENABLE, 
	"LAST_USED" TIMESTAMP (6) NOT NULL ENABLE, 
	 CONSTRAINT "PERSISTENT_LOGINS_PK" PRIMARY KEY ("SERIES") ENABLE
   )		
   
   
<script>
1st example

var idleTime = 2000; // number of miliseconds until the user is considered idle
var initialSessionTimeoutMessage = 'Your session will expire in <span id="sessionTimeoutCountdown"></span> seconds.<br /><br />Click on <b>OK</b> to continue your session.';
var sessionTimeoutCountdownId = 'sessionTimeoutCountdown';
var redirectAfter = 10; // number of seconds to wait before redirecting the user
var redirectTo = ' http://regretless.com/2010/02/14/jquery-session-timeout-countdown/'; // URL to relocate the user to once they have timed out
var keepAliveURL = 'keepAlive.php'; // URL to call to keep the session alive
var expiredMessage = 'Your session has expired.  You are being logged out for security reasons.'; // message to show user when the countdown reaches 0
var running = false; // var to check if the countdown is running
var timer; // reference to the setInterval timer so it can be stopped
$(document).ready(function() {
    // create the warning window and set autoOpen to false
    var sessionTimeoutWarningDialog = $("#sessionTimeoutWarning");
    $(sessionTimeoutWarningDialog).html(initialSessionTimeoutMessage);
    $(sessionTimeoutWarningDialog).dialog({
        title: 'Session Expiration Warning',
        autoOpen: false,    // set this to false so we can manually open it
        closeOnEscape: false,
        draggable: false,
        width: 460,
        minHeight: 50,
        modal: true,
        beforeclose: function() { // bind to beforeclose so if the user clicks on the "X" or escape to close the dialog, it will work too
            // stop the timer
            clearInterval(timer);
 
            // stop countdown
            running = false;
 
            // ajax call to keep the server-side session alive
            $.ajax({
              url: keepAliveURL,
              async: false
            });
        },
        buttons: {
            OK: function() {
                // close dialog
                $(this).dialog('close');
            }
        },
        resizable: false,
        open: function() {
            // scrollbar fix for IE
            $('body').css('overflow','hidden');
        },
        close: function() {
            // reset overflow
            $('body').css('overflow','auto');
        }
    }); // end of dialog
 
 
    // start the idle timer
    $.idleTimer(idleTime);
 
    // bind to idleTimer's idle.idleTimer event
    $(document).bind("idle.idleTimer", function(){
        // if the user is idle and a countdown isn't already running
        if($.data(document,'idleTimer') === 'idle' &amp;&amp; !running){
            var counter = redirectAfter;
            running = true;
 
            // intialisze timer
            $('#'+sessionTimeoutCountdownId).html(redirectAfter);
            // open dialog
            $(sessionTimeoutWarningDialog).dialog('open');
 
            // create a timer that runs every second
            timer = setInterval(function(){
                counter -= 1;
 
                // if the counter is 0, redirect the user
                if(counter === 0) {
                    $(sessionTimeoutWarningDialog).html(expiredMessage);
                    $(sessionTimeoutWarningDialog).dialog('disable');
                    window.location = redirectTo;
                } else {
                    $('#'+sessionTimeoutCountdownId).html(counter);
                };
            }, 1000);
        };
    });
 
});
   
   
   
   
  2nd example 
   
   sessionMonitor = function(options) {
    "use strict";

    var defaults = {
            // Session lifetime (milliseconds)
            sessionLifetime: 60 * 60 * 1000,
            // Amount of time before session expiration when the warning is shown (milliseconds)
            timeBeforeWarning: 10 * 60 * 1000,
            // Minimum time between pings to the server (milliseconds)
            minPingInterval: 1 * 60 * 1000,
            // Space-separated list of events passed to $(document).on() that indicate a user is active
            activityEvents: 'mouseup',
            // URL to ping the server using HTTP POST to extend the session
            pingUrl: '/ping',
            // URL used to log out when the user clicks a "Log out" button
            logoutUrl: '/logout',
            // URL used to log out when the session times out
            timeoutUrl: '/logout?timeout=1',
            ping: function() {
                // Ping the server to extend the session expiration using a POST request.
                $.ajax({
                    type: 'POST',
                    url: self.pingUrl
                });
            },
            logout: function() {
                // Go to the logout page.
                window.location.href = self.logoutUrl;
            },
            onwarning: function() {
                // Below is example code to demonstrate basic functionality. Use this to warn
                // the user that the session will expire and allow the user to take action.
                // Override this method to customize the warning.
                var warningMinutes = Math.round(self.timeBeforeWarning / 60 / 1000),
                    $alert = $('<div id="jqsm-warning">Your session will expire in ' + warningMinutes + ' minutes. ' +
                               '<button id="jqsm-stay-logged-in">Stay Logged In</button>' +
                               '<button id="jqsm-log-out">Log Out</button>' +
                               '</div>');

                if (!$('body').children('div#jqsm-warning').length) {
                    $('body').prepend($alert);
                }
                $('div#jqsm-warning').show();
                $('button#jqsm-stay-logged-in').on('click', self.extendsess)
                    .on('click', function() { $alert.hide(); });
                $('button#jqsm-log-out').on('click', self.logout);
            },
            onbeforetimeout: function() {
                // By default this does nothing. Override this method to perform actions
                // (such as saving draft data) before the user is automatically logged out.
                // This may optionally return a jQuery Deferred object, in which case
                // ontimeout will be executed when the deferred is resolved or rejected.
            },
            ontimeout: function() {
                // Go to the timeout page.
                window.location.href = self.timeoutUrl;
            }
        },
        self = {},
        _warningTimeoutID,
        _expirationTimeoutID,
        // The time of the last ping to the server.
        _lastPingTime = 0;

    function extendsess() {
        // Extend the session expiration. Ping the server and reset the timers if
        // the minimum interval has passed since the last ping.
        var now = $.now(),
            timeSinceLastPing = now - _lastPingTime;

        if (timeSinceLastPing > self.minPingInterval) {
            _lastPingTime = now;
            _resetTimers();
            self.ping();
        }
    }

    function _resetTimers() {
        // Reset the session warning and session expiration timers.
        var warningTimeout = self.sessionLifetime - self.timeBeforeWarning;

        window.clearTimeout(_warningTimeoutID);
        window.clearTimeout(_expirationTimeoutID);
        _warningTimeoutID = window.setTimeout(self.onwarning, warningTimeout);
        _expirationTimeoutID = window.setTimeout(_onTimeout, self.sessionLifetime);
    }

    function _onTimeout() {
        // A wrapper that calls onbeforetimeout and ontimeout and supports asynchronous code.
        $.when(self.onbeforetimeout()).always(self.ontimeout);
    }

    // Add default variables and methods, user specified options, and non-overridable
    // public methods to the session monitor instance.
    $.extend(self, defaults, options, {
        extendsess: extendsess
    });
    // Set an event handler to extend the session upon user activity (e.g. mouseup).
    $(document).on(self.activityEvents, extendsess);
    // Start the timers and ping the server to ensure they are in sync with the backend session expiration.
    extendsess();

    return self;
};

  
Here is the important HTML:

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8" />
        <title>Login</title>
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css" />
    </head>
    <body>
        <div id="session-warning-modal" class="modal">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title" id="sessWarnLabel">Your session is about to expire<a class="sectionlink" title="Section permalink" href="#sessWarnLabel">�</a></h4>
                    </div>
                    <div class="modal-body">
                        Your session will expire in <span id="remaining-time"></span> minutes due to inactivity.
                    </div>
                    <div class="modal-footer">
                        <button id="log-out" class="btn btn-default" type="button" data-dismiss="modal">Log Out</button>
                        <button id="stay-logged-in" class="btn btn-warning" type="button" data-dismiss="modal">Stay Logged In</button>
                    </div>
                </div>
            </div>
        </div>
        <script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
        <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
        <script src="{{ url_for('static', filename='session-monitor.js')}}"></script>
        <script type="text/javascript">
            // Configure and start the session timeout monitor
            sessMon = sessionMonitor({
                // Subtract 1 minute to ensure the backend doesn't expire the session first
                sessionLifetime: {{ PERMANENT_SESSION_LIFETIME_MS }} - (1 * 60 * 1000),
                timeBeforeWarning: 10 * 60 * 1000,  // 10 minutes
                minPingInterval: 1 * 60 * 1000,  // 1 minute
                pingUrl: '/ping',
                logoutUrl: '/logout',
                timeoutUrl: '/logged-out?timeout=1&next=' + encodeURIComponent(
                    window.location.pathname + window.location.search + window.location.hash),
                // The "mouseup" event was used instead of "click" because some of the
                // inner elements on some pages have click event handlers that stop propagation.
                activityEvents: 'mouseup',
                onwarning: function() {
                    $("#session-warning-modal").modal("show");
                }
            });
            $(document).ready( function() {
                // Configure the session timeout warning modal
                $("#session-warning-modal")
                    .modal({
                        "backdrop": "static",
                        "keyboard": false,
                        "show": false
                    })
                    .on("click", "#stay-logged-in", sessMon.extendsess)
                    .on("click", "#log-out", sessMon.logout)
                    .find("#remaining-time").text(Math.round(sessMon.timeBeforeWarning / 60 / 1000));
            });
            window.sessMon = sessMon;
        </script>
    </body>
</html>
 
Here is the Python Flask app (myapp.py):

import collections
import datetime

from flask import Flask, request, render_template, redirect, url_for, session
from flask.ext.login import (
    LoginManager, login_user, logout_user,  UserMixin, login_required)
from wtforms.fields import PasswordField, StringField
from wtforms.form import Form


UserRow = collections.namedtuple('UserRow', ['id', 'password'])
TOY_USER_DATABASE = {
    'george': UserRow(id=1, password='george'),
}


# settings ###############################################################
# Set a secret key to sign the session (Flask config value)
SECRET_KEY = 'insert secret key here'

# The amount of time after which the user's session expires
# (this is a Flask setting and is also used by the Javascript)
PERMANENT_SESSION_LIFETIME = datetime.timedelta(minutes=60)


# init ###############################################################
app = Flask(__name__)
app.config.from_object(__name__)
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = '.login'


@login_manager.user_loader
def load_user(userid):
    return User(userid)


@app.context_processor
def add_session_config():
    """Add current_app.permanent_session_lifetime converted to milliseconds
    to context. The config variable PERMANENT_SESSION_LIFETIME is not
    used because it could be either a timedelta object or an integer
    representing seconds.
    """
    return {
        'PERMANENT_SESSION_LIFETIME_MS': (
            app.permanent_session_lifetime.seconds * 1000),
    }


# models ###############################################################
class User(UserMixin):
    def __init__(self, id):
        self.id = id


# forms ###############################################################
class LoginForm(Form):
    username = StringField()
    password = PasswordField()


# views ###############################################################
@app.route("/login", methods=['GET', 'POST'])
def login():
    form = LoginForm(request.form)
    message = ''

    if request.method == 'POST' and form.validate():
        db_user = TOY_USER_DATABASE.get(form.username.data)
        if form.password.data == db_user.password:
            user = User(db_user.id)
            login_user(user)
            return redirect(url_for('.home'))
        else:
            message = 'Login failed.'

    context = {
        'form': form,
        'message': message,
    }
    return render_template('login.html', **context)


@app.route("/")
@login_required
def home():
    return render_template('home.html')


@app.route("/another-page")
@login_required
def another_page():
    return render_template('another_page.html')


@app.route("/logout")
@login_required
def logout():
    logout_user()
    return redirect(url_for('.logged_out') + '?' + request.query_string)


@app.route("/logged-out")
def logged_out():
    timed_out = request.args.get('timeout')
    return render_template('logged_out.html', timed_out=timed_out)


@app.route("/ping", methods=['POST'])
def ping():
    session.modified = True
    return 'OK'


if __name__ == "__main__":
    app.run(debug=True)
 
</script>


http://stackoverflow.com/questions/30465618/spring-security-invalid-session-redirect/30902653#30902653
http://a4academics.com/blog/380-j2ee-user-authentication-using-java-servlet-filters
http://www.javaworld.com/article/2073096/don-t-trust-cookie-setmaxage.html
http://www.javaworld.com/article/2073234/tracking-session-expiration-in-browser.html


***********************
*** some AJAX stuff ***

a way to get a set of Strings from a .jsp using a MAP; the JSON.stringify(data) must be used in the AJAX call;
this was one of the attempts to get the old and new passwords back to the controller

public String postPassword(@RequestBody Map<String, String> map, HttpServletResponse response) {

	for (Map.Entry<String, String> entry : map.entrySet()) {
		logger.info("key:" + entry.getKey() + " value:" + entry.getValue());
	}
	String oldPassword = map.get("oldpassword");
	String newPassword = map.get("newpassword");

	
***********************
*** exceptions ********

1) manually entered a recipe ID into viewRecipe URL
ObjectNotFoundException: No row with the given identifier exists: [net.kear.recipeorganizer.persistence.model.Recipe#112]
NumberFormatException: For parameter string: "abc"
2) used a recipe view bookmark (referer is null)
NullPointerException
3) solr not running
NullPointerException
	
	
*************************************
*** session and logout stuff ********
	
		//HttpSession session = request.getSession();

		/*Enumeration<String> attrNames = session.getAttributeNames();
		while (attrNames.hasMoreElements())
			logger.info("getContact before: session attrNames " + attrNames.nextElement());

		attrNames = request.getAttributeNames();
		while (attrNames.hasMoreElements())
			logger.info("getContact before: request attrNames " + attrNames.nextElement());

		Collection<String> hdrNames = response.getHeaderNames();
		for (String name : hdrNames) {
			logger.info("getContact before: response names " + name);
		}
		
		DefaultCsrfToken token = null;
		
		Object obj = session.getAttribute("org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository.CSRF_TOKEN");
		if (obj != null) {
			logger.info("getContact before: csrf token: " + obj.toString());
			token = (DefaultCsrfToken)obj;
		}
		
		//HttpSessionCsrfTokenRepository repo = new HttpSessionCsrfTokenRepository();
		//token = repo.loadToken(request);
		
		//HttpSessionCsrfTokenRepository repo = HttpSessionCsrfTokenRepository
		//CsrfTokenRepository repo = (CsrfTokenRepository)obj;
		//HttpSessionCsrfTokenRepository repo = (HttpSessionCsrfTokenRepository)obj;
		
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		if (auth != null) {
			//new CookieClearingLogoutHandler().logout(request, response, auth);
			//new TokenBasedRememberMeServices().logout(request, response, auth);
			//repo.saveToken(null, request, response);
			//session.removeAttribute("org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository.CSRF_TOKEN");
			//new CsrfLogoutHandler(repo).logout(request, response, auth);
			new SecurityContextLogoutHandler().logout(request, response, auth);
		}
		
		attrNames = request.getAttributeNames();
		while (attrNames.hasMoreElements())
			logger.info("getContact after: request attrNames " + attrNames.nextElement());
		
		hdrNames = response.getHeaderNames();
		for (String name : hdrNames) {
			logger.info("getContact after: response names " + name);
		}
		
		//obj = request.getAttribute("_csrf");
		//request.setAttribute("_csrf", null);
		
		return "redirect:about";
*/		
	
*************************************
*** regex stuff ********
	
		/*String test = "Sugar";
		String regex = "\\bsu";
		
		Pattern pattern = Pattern.compile(regex, Pattern.CASE_INSENSITIVE);
		Matcher matcher = pattern.matcher(test);
		boolean rslt = matcher.find();
		logger.debug("rslt " + test + ":" + rslt);
		test = "Brown Sugar";
		matcher = pattern.matcher(test);
		rslt = matcher.find();
		logger.debug("rslt " + test + ":" + rslt);
		test = "Confectioners' Sugar";
		matcher = pattern.matcher(test);
		rslt = matcher.find();
		logger.debug("rslt " + test + ":" + rslt);
		test = "Granulated Sugar";
		matcher = pattern.matcher(test);
		rslt = matcher.find();
		logger.debug("rslt " + test + ":" + rslt);
		test = "Light Brown Sugar";
		matcher = pattern.matcher(test);
		rslt = matcher.find();
		logger.debug("rslt " + test + ":" + rslt);
		test = "LightBrownSugar";
		matcher = pattern.matcher(test);
		rslt = matcher.find();
		logger.debug("rslt " + test + ":" + rslt);*/
		
		
		String[] ingreds1 = {"Brown Sugar","Confectioners' Sugar","Granulated Sugar","Light Brown Sugar","LightBrownSugar"}; 
		String[] ingreds2 = {"All-purpose Flour","Canned Unsweetened Pumpkin Puree","Pumpkin","Pure Vanilla Extract"};
		List<String> matches = new ArrayList<String>();
		
		String regex = "\\bsu";
		String test = "Brown Sugar";
		Pattern p = Pattern.compile(regex, Pattern.CASE_INSENSITIVE);
		Matcher m = p.matcher(test);
		logger.debug("found Brown Sugar: " + m.find());
		
		for (String s : ingreds1) {
			logger.debug("trying " + s);
	        if (p.matcher(s).find()) {
	            matches.add(s);
	        }
	    }

		for (String str : matches) {
			logger.debug("found: " + str);
		}
		
		matches.clear();
		
		regex = "\\bpu";
		p = Pattern.compile(regex, Pattern.CASE_INSENSITIVE);
		for (String s : ingreds2) {
	        if (p.matcher(s).find()) {
	            matches.add(s);
	        }
	    }

		for (String str : matches) {
			logger.debug("found: " + str);
		}
		
		
		String query = "pu";				
		for (String s : ingreds2) {
			String lower = s.toLowerCase();
			if (lower.startsWith(query))
				matches.add(s);
		}
			
		for (String s : ingreds2) {
			String lower = s.toLowerCase();
			String[] splitStr = lower.split("\\s+");
			if (splitStr.length > 1) {
				for (int i=1;i<splitStr.length;i++) {
					if (splitStr[i].startsWith(query)) {
						matches.add(s);
						break;
					}
				}
			}
		}		

		for (String str : matches) {
			logger.debug("found: " + str);
		}
	
	
*********************************
*** multipart file stuff ********
	
	
			//ServletExternalContext context = (ServletExternalContext) requestContext.getExternalContext();
		//MultipartHttpServletRequest multipartRequest = new StandardMultipartHttpServletRequest((HttpServletRequest)context.getNativeRequest());		//multipartFiles appears to be initialized
		//MultipartHttpServletRequest multipartRequest = new DefaultMultipartHttpServletRequest((HttpServletRequest)context.getNativeRequest());
		//MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest)((HttpServletRequest)context.getNativeRequest());	//cannot cast
		//MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest)context.getNativeRequest();	//cannot cast
		//Map file = multipartRequest.getFileMap();
		//HttpServletRequest request = (HttpServletRequest)context.getNativeRequest();
		
		/*SecurityContextHolderAwareRequestWrapper wrapper1 = (SecurityContextHolderAwareRequestWrapper)context.getNativeRequest();
		HttpServletRequestWrapper wrapper2 = (HttpServletRequestWrapper)wrapper1.getRequest();
		FirewalledRequest firewall = (FirewalledRequest)wrapper2.getRequest();
		MultipartHttpServletRequest multipartRequest = (DefaultMultipartHttpServletRequest)firewall.getRequest();
		MultipartFile file = multipartRequest.getFile("photofile");	//null
		Map<String, List<MultipartFile>> fileMap = multipartRequest.getMultiFileMap();
		Enumeration<String> names = multipartRequest.getAttributeNames();
		String type = multipartRequest.getContentType();
		int len = multipartRequest.getContentLength();
		ServletInputStream stream = null;
		try {
			stream = multipartRequest.getInputStream();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		Map<String,String[]> map = multipartRequest.getParameterMap();
		Collection<Part> parts = null;
		try {
			parts = multipartRequest.getParts();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ServletException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}*/
		
		
		//MultipartHttpServletRequest multi = firewall.get
		
		//MultipartHttpServletRequest multipartRequest = resolver.resolveMultipart(request);		
		
		//String encode = request.getCharacterEncoding();			//utf-8
		//Enumeration<String> names = request.getHeaderNames();	//request hdr stuff; does include the multipart/form-data and length
		//Map<String,String[]> map = request.getParameterMap();	//map of the form fields, except for the file
		
		//DefaultMultipartHttpServletRequest defaultRequest = new DefaultMultipartHttpServletRequest(request);
		//map = defaultRequest.getParameterMap();		//boom: Multipart request not initialized
		//names = defaultRequest.getAttributeNames();
		
		//HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request);
		//names = wrapper.getAttributeNames();
		//map = wrapper.getParameterMap();
		
		//DefaultMultipartHttpServletRequest defaultRequest = new DefaultMultipartHttpServletRequest(wrapper); //multipartFiles is null
				
		//return FileResult.NO_FILE;

		//MultipartFile file = requestContext.getRequestParameters().getRequiredMultipartFile("file"); //attribute not present
		//HttpServletRequest request = (HttpServletRequest)context.getNativeRequest();
		//AbstractMultipartHttpServletRequest abstractRequest = (AbstractMultipartHttpServletRequest)(context.getNativeRequest());
		//DefaultMultipartHttpServletRequest defaultRequest = (DefaultMultipartHttpServletRequest)(context.getNativeRequest());	//can't cast
		//MultipartHttpServletRequest multipartRequest = new DefaultMultipartHttpServletRequest((HttpServletRequest)context.getNativeRequest());
		
		//Default multipartRequest
		//SecurityContextHolderAwareRequestWrapper[ org.springframework.security.web.context.HttpSessionSecurityContextRepository$Servlet3SaveToSessionRequestWrapper@1704e4ea]
		//org.springframework.security.web.context.HttpSessionSecurityContextRepository $Servlet3SaveToSessionRequestWrapper@1704e4ea
		//FirewalledRequest[ org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest@2c00a2de]
		//org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest@2c00a2de
		
		//Standard multipartRequest
		//org.springframework.web.multipart.support.StandardMultipartHttpServletRequest@4a848958
		//SecurityContextHolderAwareRequestWrapper[ org.springframework.security.web.context.HttpSessionSecurityContextRepository$Servlet3SaveToSessionRequestWrapper@3e6b3cdc]
		//org.springframework.security.web.context.HttpSessionSecurityContextRepository$Servlet3SaveToSessionRequestWrapper@3e6b3cdc
		//FirewalledRequest[ org.springframework.web.multipart.support.StandardMultipartHttpServletRequest@12536297]
		//org.springframework.web.multipart.support.StandardMultipartHttpServletRequest@12536297
		
		/*Collection<Part> parts = null;	//is not null, but is empty
		try {
			parts = request.getParts();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ServletException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		if (parts != null) {
			for (Part p : parts) {
				String type = p.getContentType();
				String name = p.getName();
				Class<?> clazz = p.getClass();
			}
				
		}*/
	